name : OrderApi-CD
trigger: none
resources:
  containers:
  - container: linuxsqlpackage
    image: wolfgangofner/linuxsqlpackage:1.0
  pipelines:
   - pipeline: OrderApiBuild
     source: OrderApi-CI
     trigger:
      branches:
       include:
         - master
         - pull/*
         - refs/pull/*

pool:
  vmImage: 'ubuntu-latest'

variables:  
  AzureSubscription: 'AzureServiceConnection' # Name of the Service Connection
  ApiName: 'orderapi'
  ArtifactName: 'OrderApi'
  ClusterResourceGroup: MicroserviceDemo  
  ChartPackage: '$(Pipeline.Workspace)/OrderApiBuild/OrderApi/orderapi-$(resources.pipeline.OrderApiBuild.runname).tgz'  
  DatabaseName: Order
  HelmVersion: 3.5.0
  KubernetesCluster: 'microservice-aks'
  Managedidentity-aks: managedidentity-aks
  ReleaseValuesFile: '$(Pipeline.Workspace)/OrderApiBuild/OrderApi/values.yaml'
  SQLServerName: wolfgangmicroservicedemosql.database.windows.net # replace with your server url  
  IngressEnabled: true
  TlsSecretName: orderapi-tls
  UseAadAuthentication: false

stages:
- stage: PR_Deploy
  condition: startsWith(variables['resources.pipeline.OrderApiBuild.sourcebranch'], 'refs/pull/') 
  variables:      
    DeploymentEnvironment: 'pr-$(prId)'
    K8sNamespace: '$(ApiName)-$(DeploymentEnvironment)'
    ConnectionString: "Server=tcp:$(SQLServerName),1433;Initial Catalog=$(DatabaseName)-$(DeploymentEnvironment);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
    URL: $(DeploymentEnvironment).order.programmingwithwolfgang.com # replace with your service url     
  jobs:
  - deployment: Web_PR
    environment: "orderapi-PR-Deploy"
    displayName: 'Deploy OrderApi to the PR environment'    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: OrderApiBuild
            artifact: $(ArtifactName)
          - template: templates/GetPrId.yml
          - template: templates/DeployHelmPackage.yml
            parameters:
              apiName: $(ApiName)
              azureSubscription: '$(AzureSubscription)'
              clusterResourceGroup: '$(ClusterResourceGroup)'
              chartPackage: '$(ChartPackage)'
              helmVersion: $(HelmVersion)
              k8sNamespace: $(K8sNamespace)
              kubernetesCluster: $(KubernetesCluster)
              releaseValuesFile: '$(ReleaseValuesFile)' 
 
- stage: PR_Delete
  dependsOn: PR_Deploy
  condition: succeeded('PR_Deploy')
  variables:
    K8sNamespace: '$(ApiName)-pr-$(prId)'
  jobs:  
  - deployment: Delete_PR_Namespace
    environment: "orderapi-PR-Delete" 
    displayName: Build and push Docker image and create Helm package
    strategy:
      runOnce:
        deploy:
         steps:
         - download: none
         - template: templates/GetPrId.yml
         - task: Kubernetes@1
           inputs:
             connectionType: 'Azure Resource Manager'
             azureSubscriptionEndpoint: '$(AzureSubscription)'
             azureResourceGroup: $(ClusterResourceGroup)
             kubernetesCluster: $(KubernetesCluster)
             useClusterAdmin: true
             command: 'delete'
             arguments: 'namespaces $(k8sNamespace)'
           displayName: 'Delete PR namespace'

- stage: Test  
  condition: startsWith(variables['resources.pipeline.OrderApiBuild.sourcebranch'], 'refs/heads/master')
  variables:
    DeploymentEnvironment: 'test'
    K8sNamespace: '$(ApiName)-$(DeploymentEnvironment)'
    ConnectionString: "Server=tcp:$(SQLServerName),1433;Initial Catalog=$(DatabaseName)-$(DeploymentEnvironment);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
    # ConnectionString: "Server=tcp:$(SQLServerName);Authentication=Active Directory Device Code Flow; Database=$(DatabaseName)-$(DeploymentEnvironment);"
    URL: $(DeploymentEnvironment).order.programmingwithwolfgang.com # replace with your service url
  jobs:
  - deployment: Web_Test
    displayName: 'Deploy OrderApi to the orderapi-test environment'
    environment: orderapi-test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: OrderApiBuild
            artifact: $(ArtifactName)          
          - template: templates/DeployHelmPackage.yml
            parameters:
              apiName: $(ApiName)
              azureSubscription: '$(AzureSubscription)'
              clusterResourceGroup: '$(ClusterResourceGroup)'
              chartPackage: '$(ChartPackage)'
              helmVersion: $(HelmVersion)
              k8sNamespace: $(K8sNamespace)
              kubernetesCluster: $(KubernetesCluster)
              releaseValuesFile: '$(ReleaseValuesFile)' 
 
  - deployment: Database_Test
    dependsOn: Web_Test
    condition: startsWith(variables['resources.pipeline.OrderApiBuild.sourcebranch'], 'refs/heads/master')
    displayName: 'Deploy the test database'   
    environment: database-test
    container: linuxsqlpackage
    strategy:
      runOnce:
        deploy:
          steps:
          - download: OrderApiBuild
            artifact: dacpacs
          - template: templates/DatabaseDeploy.yml
            parameters:          
                connectionString: $(ConnectionString)
                dacpacPath: "$(Pipeline.Workspace)/OrderApiBuild/dacpacs/$(ArtifactName).Database.Build.dacpac"

- stage: Prod
  dependsOn: Test  
  condition: startsWith(variables['resources.pipeline.OrderApiBuild.sourcebranch'], 'refs/heads/master')
  variables:
    DeploymentEnvironment: 'prod'
    K8sNamespace: '$(ApiName)-$(DeploymentEnvironment)'
    ConnectionString: "Server=tcp:$(SQLServerName),1433;Initial Catalog=$(DatabaseName)-$(DeploymentEnvironment);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
    # ConnectionString: "Server=tcp:$(SQLServerName);Authentication=Active Directory Device Code Flow; Database=$(DatabaseName)-$(DeploymentEnvironment);"
    URL: order.programmingwithwolfgang.com # replace with your service url
  jobs:
  - deployment: Web_Prod
    displayName: 'Deploy OrderApi to the orderapi-prod environment'
    environment: orderapi-prod
    strategy:
      runOnce:
        deploy:
          steps:
          - download: OrderApiBuild
            artifact: $(ArtifactName)          
          - template: templates/DeployHelmPackage.yml
            parameters:
              apiName: $(ApiName)
              azureSubscription: '$(AzureSubscription)'
              clusterResourceGroup: '$(ClusterResourceGroup)'
              chartPackage: '$(ChartPackage)'
              helmVersion: $(HelmVersion)
              k8sNamespace: $(K8sNamespace)
              kubernetesCluster: $(KubernetesCluster)
              releaseValuesFile: '$(ReleaseValuesFile)' 
 
  - deployment: Database_Prod
    dependsOn: Web_Prod
    condition: startsWith(variables['resources.pipeline.OrderApiBuild.sourcebranch'], 'refs/heads/master')
    displayName: 'Deploy the prod database'   
    environment: database-prod
    container: linuxsqlpackage
    strategy:
      runOnce:
        deploy:
          steps:
          - download: OrderApiBuild
            artifact: dacpacs
          - template: templates/DatabaseDeploy.yml
            parameters:
                connectionString: $(ConnectionString)
                dacpacPath: "$(Pipeline.Workspace)/OrderApiBuild/dacpacs/$(ArtifactName).Database.Build.dacpac"